{
  "hash": "f7aba277623f3ffc05ccb70dc2ab3f1e",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Create computing environments with `rix`\"\ndescription: |\n  This post describes my first steps using the `rix` package for developing and sharing computing environments.\ndate: \"2024-02-04\"\ncategories: [r, rix, computing-environments]\ndraft: true\n---\n\n\n\n## Overview\n\nI recently discovered the `rix` package, which is a tool for creating and sharing computing environments for R.\n\n## History\n\nThe `rix` package is built to interface the Nix package manager with R. Nix is a powerful package manager for Linux and other Unix systems that makes package management reliable and reproducible. If you are familiar with Docker and `renv`, you can think of `rix` as a combination of the two with some additional features.\n\nThe Nix software repository is large (some 80+, including CRAN). It also contains pinned versions of software, which makes it possible to create reproducible computing environments.\n\n## `rix` basics\n\nIt is possible to create Nix expressions (build templates) for R packages and environments without with only `rix` installed. Let's go through the basics of creating a Nix expression with `rix`.\n\nInstall `rix` from the author's R-universe repository and load it.\n\n```r\ninstall.packages(\"rix\", repos = \"https://b-rodrigues.r-universe.dev\")\nlibrary(rix)\n```\n\nNow, let's take a look at the `rix` functions.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nls(\"package:rix\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"available_r\" \"nix_build\"   \"r_nix_revs\"  \"rix\"         \"rix_init\"   \n[6] \"tar_nix_ga\"  \"with_nix\"   \n```\n\n\n:::\n:::\n\n\n\n## A simple expression\n\nLet's create a simple Nix expression which includes the latest version of R and the `dplyr` package.\n\n\n\n::: {.cell lable='simple-rix'}\n\n```{.r .cell-code}\nrix(\n  r_ver = \"latest\",\n  r_pkgs = c(\"dplyr\")\n)\n```\n:::\n\n\n\nThe `rix` function creates a Nix expression in a file in the current working directory called `default.nix` that specifies the R version and the packages to be installed. The `r_ver` argument specifies the R version, and the `r_pkgs` argument specifies the R packages to be installed.\n\n```{.nix filename=\"default.nix\"}\n{ pkgs ? import <nixpkgs> {} }:\n\nlet\n  pkgs = import (fetchTarball \"https://github.com/NixOS/nixpkgs/archive/79a13f1437e149dc7be2d1290c74d378dad60814.tar.gz\") {};\n\n  rpkgs = builtins.attrValues {\n    inherit (pkgs.rPackages) dplyr;\n  };\n  system_packages = builtins.attrValues {\n    inherit (pkgs) R glibcLocales nix ;\n  };\n\nin\n  pkgs.mkShell {\n    LOCALE_ARCHIVE = if pkgs.system == \"x86_64-linux\" then  \"${pkgs.glibcLocales}/lib/locale/locale-archive\" else \"\";\n    LANG = \"en_US.UTF-8\";\n    LC_ALL = \"en_US.UTF-8\";\n    LC_TIME = \"en_US.UTF-8\";\n    LC_MONETARY = \"en_US.UTF-8\";\n    LC_PAPER = \"en_US.UTF-8\";\n    LC_MEASUREMENT = \"en_US.UTF-8\";\n\n    buildInputs = [  rpkgs  system_packages  ];\n\n  }\n```\n\n## Building the environment\n\nTo build the environment from the Nix expression, we will need to install the Nix package manager. I'm on macOS, so I instantly looked on Homebrew, and Nix is not to be found --then I looked at the [suggested installation instructions for macOS](https://b-rodrigues.github.io/rix/articles/b2-setting-up-and-using-rix-on-macos.html), duh! I looked into the [Determinate Systems](https://determinate.systems/posts/determinate-nix-installer) website which described why the installation of Nix is not straightforward --it's just not an install and go process.\n\nBut, the people at Determinate Systems have a Terminal one-liner to install Nix on macOS. You will need sudoers privileges to run this command.\n\n```zsh\ncurl --proto '=https' --tlsv1.2 -sSf \\\n    -L https://install.determinate.systems/nix | \\\n     sh -s -- install\n```\n\nNix will ask for permissions to do the following default actions:\n\n```zsh\nPlanned actions:\n* Create an encrypted APFS volume `Nix Store` for Nix on `disk1` and add it to `/etc/fstab` mounting on `/nix`\n* Fetch `https://releases.nixos.org/nix/nix-2.19.3/nix-2.19.3-x86_64-darwin.tar.xz` to `/nix/temp-install-dir`\n* Create a directory tree in `/nix`\n* Move the downloaded Nix into `/nix`\n* Create build users (UID 301-332) and group (GID 30000)\n* Configure Time Machine exclusions\n* Setup the default Nix profile\n* Place the Nix configuration in `/etc/nix/nix.conf`\n* Configure the shell profiles\n* Configuring zsh to support using Nix in non-interactive shells\n* Create a `launchctl` plist to put Nix into your PATH\n* Configure Nix daemon related settings with launchctl\n* Remove directory `/nix/temp-install-dir`\n```\n\nOnce Nix is installed, we can build the environment with the `nix-build` command. Make sure you are in the directory where the `default.nix` file is located.\n\n```zsh\nnix-build\n```\n\nThis operation will take a while, as Nix will download and build the environment. Once the environment is built, you will see a symlink to the environment in the current directory.\n\n```zsh\n./\n├── default.nix\n└── result -> /nix/store/x34n6nlz5133y50iy8l8rf602xjh7sw0-nix-shell\n```\n\n## Using the environment\n\nTo use the environment, we can use the `nix-shell` command.\n\n```zsh\nnix-shell\n```\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}