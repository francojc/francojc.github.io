<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Unix on francojc ⟲</title>
    <link>/categories/unix/</link>
    <description>Recent content in Unix on francojc ⟲</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2017 Jerid Francom</copyright>
    <lastBuildDate>Mon, 02 Feb 2015 00:00:00 +0000</lastBuildDate>
    <atom:link href="/categories/unix/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Selecting and copying a random subset of files in the Fish shell</title>
      <link>/2015/02/02/selecting-and-copying-a-random-subset-of-files-in-the-fish-shell/</link>
      <pubDate>Mon, 02 Feb 2015 00:00:00 +0000</pubDate>
      
      <guid>/2015/02/02/selecting-and-copying-a-random-subset-of-files-in-the-fish-shell/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve recently switched from &lt;a href=&#34;https://www.gnu.org/software/bash/&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;bash&lt;/code&gt;&lt;/a&gt; to &lt;a href=&#34;http://fishshell.com&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;fish&lt;/code&gt;&lt;/a&gt; for my shell in UNIX. In this Note-to-self I want to document copying a random sample of files that fit certain characteristics to another directory using fish. Specifically, I select 200 files from the &lt;a href=&#34;https://github.com/francojc/activ-es&#34; target=&#34;_blank&#34;&gt;ACTIV-ES corpus&lt;/a&gt; from years 2000-present and copy them to a new directory.&lt;/p&gt;

&lt;p&gt;The files look like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;...
es_Argentina_1996_Bromato-de-armonio_video-movie_Comedy_333189.run
es_Argentina_1996_Moebius_movie_Sci-Fi_117069.run
es_Argentina_1997_La-furia_movie_Action_202362.run
es_Argentina_1998_Diario-para-un-cuento_movie_Drama_177705.run
es_Argentina_1999_La-venganza_movie_Action_226587.run
es_Argentina_2000_Nueve-reinas_movie_Crime_247586.run
es_Argentina_2001_El-hijo-de-la-novia_movie_Comedy_292542.run
es_Argentina_2002_Angel_tv-movie_n_315769.run
es_Argentina_2002_Ciudad-de-María_movie_Documentary_317252.run
es_Argentina_2002_Mercano,-el-marciano_movie_Animation_283476.run
es_Argentina_2002_Tres-pájaros_movie_Adventure_341625.run
es_Argentina_2002_Valentín_movie_Comedy_296915.run
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The commands that I used ended up being: &lt;code&gt;find&lt;/code&gt;, &lt;code&gt;grep&lt;/code&gt;, &lt;code&gt;shuf&lt;/code&gt;, and &lt;code&gt;cat&lt;/code&gt; in combination with &lt;code&gt;cp&lt;/code&gt;. So here&amp;rsquo;s the command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cp (find . -name &amp;quot;*&amp;quot; | grep &#39;es_.*2\d\d\d_&#39; | shuf -n200 | cat) ~/Desktop/aes
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The trick here is with the command &lt;code&gt;shuf&lt;/code&gt; and &lt;code&gt;cat&lt;/code&gt;. The &lt;code&gt;shuf&lt;/code&gt; command will take a random sample of some size and return it. Unfortunately it will not return as a file, but rather a directory (or at least that is what the error says when run without &lt;code&gt;cat&lt;/code&gt;.) By adding &lt;code&gt;cat&lt;/code&gt; the selected files are returned within the &lt;code&gt;()&lt;/code&gt; to the &lt;code&gt;cp&lt;/code&gt; function.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;es_Argentina_2000_Nueve-reinas_movie_Crime_247586.run
es_Argentina_2001_El-hijo-de-la-novia_movie_Comedy_292542.run
es_Argentina_2002_Angel_tv-movie_n_315769.run
es_Argentina_2002_Ciudad-de-María_movie_Documentary_317252.run
es_Argentina_2002_Mercano,-el-marciano_movie_Animation_283476.run
es_Argentina_2002_Tres-pájaros_movie_Adventure_341625.run
es_Argentina_2002_Valentín_movie_Comedy_296915.run
es_Argentina_2003_Ciudad-de-Dios_movie_Drama_350720.run
es_Argentina_2003_El-fondo-del-mar_movie_Drama_322298.run
es_Argentina_2003_El-polaquito_movie_Drama_283552.run
es_Argentina_2004_Buena-vida-(Delivery)_movie_Comedy_397355.run
es_Argentina_2004_Deuda_movie_Documentary_424041.run
...
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Create an SSH tunnel for a remote MySQL database</title>
      <link>/2011/08/26/create-an-ssh-tunnel-for-a-remote-mysql-database/</link>
      <pubDate>Fri, 26 Aug 2011 00:00:00 +0000</pubDate>
      
      <guid>/2011/08/26/create-an-ssh-tunnel-for-a-remote-mysql-database/</guid>
      <description>&lt;p&gt;his isn&amp;rsquo;t that hard to find out on the Internets, but I want to document a couple tips that I find useful once you create an SSH Tunnel to your remote MySQL database. After you create the tunnel, you will be able to interact with the database as if it were on your local machine, which simplifies running SQL scripts.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Create an SSH Tunnel&lt;/p&gt;

&lt;p&gt;First open a command-line interface and enter:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ssh user@host -L 3306:localhost:3306
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Connect to the remote database with with local(ish) syntax&lt;/p&gt;

&lt;p&gt;Then open another command-line window (without closing the other session) and enter:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ mysql -u db_user -h 127.0.0.1 -p
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The explicit &lt;code&gt;127.0.0.1&lt;/code&gt; for localhost seems to be important (I get a connection error when I just specify &lt;code&gt;localhost&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;And there you go, a local interface to your remote MySQL database. A more complete trick-laden version of this post can be found &lt;a href=&#34;https://boxpanel.bluebox.net/public/the_vault/index.php/Tunneling_MySQL_through_SSH&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
