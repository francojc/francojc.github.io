---
title: "Adding system dependencies to a computing environment"
description: |
  This post describes adventures in trying to use {renv} to manage system dependencies in a computing environment, only to find that system-level dependencies need to be installed manually, or more conveniently with {remotes}.
date: "2024-04-09"
categories: [r, docker, renv, computing-environments]
draft: true
---

Docker is great for creating reproducible computing environments for R development. However, it can be a bit of a pain to install system-level dependencies. This is where {renv} comes in. {renv} is a package that helps manage R packages and versions. However, it doesn't manage system-level dependencies.

`pak` is a package that helps manage system-level dependencies. However, it doesn't work with `renv`, easily. ....

{remotes} has a function called `system_requirements()` that can be used to discover system-level dependencies. Once you know what the dependiencies are, you can

- install them manually before running `renv::restore()` on your `renv.lock` file.
- add the system-level dependencies to a `Dockerfile` and build a new image for your computing environment
- copy a script into the `Dockerfile` that installs the system-level dependencies when the container is started.

Looking into `remotes` and `renv` to manage system dependencies in a computing environment.

First you need to know what OS and version you are using. You can find this out by running the following command in the terminal:

```bash
lsb_release -a
```

```r
os <- "ubuntu"
os_release <- "20.04"

packages <- c("xml2", "systemfonts")

cli_deps <- remotes::system_requirements(os, os_release, package = packages)

cli_deps |>
  paste(collapse = "; ")
```
