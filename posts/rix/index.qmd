---
title: "Create computing environments with `rix`"
description: |
  This post describes my first steps using the `rix` package for developing and sharing computing environments.
date: "2024-02-04"
categories: [r, rix, computing-environments]
draft: true
---

## Overview

I recently discovered the `rix` package, which is a tool for creating and sharing computing environments for R.


## History

The `rix` package is built to interface the Nix package manager with R. Nix is a powerful package manager for Linux and other Unix systems that makes package management reliable and reproducible. If you are familiar with Docker and `renv`, you can think of `rix` as a combination of the two with some additional features.

The Nix software repository is large (some 80+, including CRAN). It also contains pinned versions of software, which makes it possible to create reproducible computing environments.

## `rix` basics

It is possible to create Nix expressions (build templates) for R packages and environments without with only `rix` installed. Let's go through the basics of creating a Nix expression with `rix`.

Install `rix` from the author's R-universe repository and load it.

```r
install.packages("rix", repos = "https://b-rodrigues.r-universe.dev")
library(rix)
```

Now, let's take a look at the `rix` functions.

```{r}
#| include: false
library(rix)
```

```{r}
#| label: rix-functions

ls("package:rix")
```

## A simple expression

Let's create a simple Nix expression which includes the latest version of R and the `dplyr` package.

```{r}
#| lable: simple-rix
#| eval: false
rix(
  r_ver = "latest",
  r_pkgs = c("dplyr")
)
```

The `rix` function creates a Nix expression in a file in the current working directory called `default.nix` that specifies the R version and the packages to be installed. The `r_ver` argument specifies the R version, and the `r_pkgs` argument specifies the R packages to be installed.

```{.nix filename="default.nix"}
{ pkgs ? import <nixpkgs> {} }:
let
 pkgs = import (fetchTarball "https://github.com/NixOS/nixpkgs/archive/79a13f1437e149dc7be2d1290c74d378dad60814.tar.gz") {};
 rpkgs = builtins.attrValues {
  inherit (pkgs.rPackages) dplyr;
};
   system_packages = builtins.attrValues {
  inherit (pkgs) R glibcLocales nix ;
};
  in
  pkgs.mkShell {
    LOCALE_ARCHIVE = if pkgs.system == "x86_64-linux" then  "${pkgs.glibcLocales}/lib/locale/locale-archive" else "";
    LANG = "en_US.UTF-8";
    LC_ALL = "en_US.UTF-8";
    LC_TIME = "en_US.UTF-8";
    LC_MONETARY = "en_US.UTF-8";
    LC_PAPER = "en_US.UTF-8";
    LC_MEASUREMENT = "en_US.UTF-8";

    buildInputs = [  rpkgs  system_packages  ];

  }
```

## Building the environment

To build the environment from the Nix expression, we will need to install the Nix package manager. I'm on macOS, so I instantly looked on Homebrew, and Nix is not to be found --then I looked at the [suggested installation instructions for macOS](https://b-rodrigues.github.io/rix/articles/b2-setting-up-and-using-rix-on-macos.html), duh! I looked into the [Determinate Systems](https://determinate.systems/posts/determinate-nix-installer) website which described why the installation of Nix is not straightforward --it's just not an install and go process.

But, the people at Determinate Systems have a Terminal one-liner to install Nix on macOS. You will need sudoers privileges to run this command.

```zsh
curl --proto '=https' --tlsv1.2 -sSf \
    -L https://install.determinate.systems/nix | \
     sh -s -- install
```

Nix will ask for permissions to do the following default actions:

```zsh
Planned actions:
* Create an encrypted APFS volume `Nix Store` for Nix on `disk1` and add it to `/etc/fstab` mounting on `/nix`
* Fetch `https://releases.nixos.org/nix/nix-2.19.3/nix-2.19.3-x86_64-darwin.tar.xz` to `/nix/temp-install-dir`
* Create a directory tree in `/nix`
* Move the downloaded Nix into `/nix`
* Create build users (UID 301-332) and group (GID 30000)
* Configure Time Machine exclusions
* Setup the default Nix profile
* Place the Nix configuration in `/etc/nix/nix.conf`
* Configure the shell profiles
* Configuring zsh to support using Nix in non-interactive shells
* Create a `launchctl` plist to put Nix into your PATH
* Configure Nix daemon related settings with launchctl
* Remove directory `/nix/temp-install-dir`
```

Once Nix is installed, we can build the environment with the `nix-build` command. Make sure you are in the directory where the `default.nix` file is located.

```zsh
nix-build
```

This operation will take a while, as Nix will download and build the environment. Once the environment is built, you will see a symlink to the environment in the current directory.

```zsh
./
├── default.nix
└── result -> /nix/store/x34n6nlz5133y50iy8l8rf602xjh7sw0-nix-shell
```

## Using the environment

To use the environment, we can use the `nix-shell` command.

```zsh
nix-shell
```


